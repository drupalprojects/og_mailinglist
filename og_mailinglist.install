<?php
// $Id$
/**
 * Implementation of hook_install().
 */
function og_mailinglist_install() {
  $success = drupal_install_schema('og_mailinglist');
  
  // Add any previously created groups to og_mailinglist.
  add_groups_to_og_mailinglist();
  
  if ($success) {
    drupal_set_message(st('OG_Mailinglist module installed tables successfully.'));
  }
  else {
    drupal_set_message(st('The installation of OG_Mailinglist module failed.'), 'error');
  }
}

/**
 * Implementation of hook_uninstall().
 */
function og_mailinglist_uninstall() {
  drupal_uninstall_schema('og_mailinglist');
  $result = db_query("SELECT name FROM {variable} WHERE name LIKE 'og_mailinglist_%'");
  while ($row = db_fetch_object($result)) {
    variable_del($row->name);
  }

  drupal_set_message(t('OG_Mailinglist has been uninstalled.'));
}

/**
 * Implementation of hook_schema().
 */
function og_mailinglist_schema() {
 $schema = array();
 
 $schema['og_mailinglist'] = array(
  'fields' => array(
   'nid' => array(
     'description' => 'The nid for the new posting.',
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0),
    'group_email' => array(
     'description' => 'The machine/email readable version of the group. Uses purl shortcode if available.',
     'type' => 'varchar',
     'length' => '255',
     'not null' => TRUE,
     'default' => ''),
   ),
   'primary key' => array('nid'),
 );
 
 $schema['og_mailinglist_source'] = array(
   'fields' => array(
     'nid' => array(
       'description' => 'The nid for the new posting.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
     'cid' => array(
       'description' => 'The cid for the new posting. If 0, means posting was a new node not comment.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
     'source' => array(
       'type' => 'varchar',
       'description' => 'If the new posting was via email or the web. Should be either "email" or "web"',
       'length' => '64',
       'not null' => TRUE,
       'default' => ''),
   ),
   'primary key' => array('nid', 'cid'),
   'indexes' => array(
     'source' => array('source'),
   ),
 );

 $schema['og_mailinglist_thread'] = array(
   'fields' => array(
     'nid' => array(
       'description' => 'The nid of the thread.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
     'uid' => array(
       'description' => 'The uid of the user who\'s subscribed to this thead.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
   ),
   'primary key' => array('nid', 'uid'),
   'indexes' => array(
     'nid' => array('nid'),
     'uid' => array('uid'),
   ),
 );

 $schema['og_mailinglist_subscription'] = array(
   'fields' => array(
     'nid' => array(
       'description' => 'The nid of the Group.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
     'uid' => array(
       'description' => 'The uid of the User.',
       'type' => 'int',
       'unsigned' => TRUE,
       'not null' => TRUE,
       'default' => 0),
     'subscription_type' => array(
       'type' => 'varchar',
       'description' => 'Subscription type, e.g. "no email", "digest email", or "email"',
       'length' => '128',
       'not null' => TRUE,
       'default' => ''
     ),
   ),
   'primary key' => array('nid', 'uid'),
   'indexes' => array(
     'uid' => array('uid'),
     'subscription_type' => array('subscription_type'),
   ),
 );
 
 return $schema;
}

/**
 * Create the og_mailinglist table.
 */
function og_mailinglist_update_6000() {
 // Create table.
 $ret = array();
 $schema['og_mailinglist'] = array(
  'fields' => array(
   'nid' => array(
     'description' => 'The nid for the new posting.',
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0),
    'group_email' => array(
     'description' => 'The machine/email readable version of the group. Uses purl shortcode if available.',
     'type' => 'varchar',
     'length' => '255',
     'not null' => TRUE,
     'default' => ''),
   ),
   'primary key' => array('nid'),
 );
 db_create_table($ret, 'og_mailinglist', $schema['og_mailinglist']);
 
 return $ret;
}

/**
 * Add entries to og_mailinglist for previously created groups.
 */
function og_mailinglist_update_6001() {
  add_groups_to_og_mailinglist();
}

/**
 * Modify og_mailinglist_subscriptions to remove space integration
 */
function og_mailinglist_update_6002() {
  $ret = array();
 
  db_drop_field($ret, 'og_mailinglist_subscription', 'space_type');
  db_change_field($ret, 'og_mailinglist_subscription', 'sid', 'nid', array(
                           'type' => 'int',
                           'not null' => TRUE,
                           'default' => 0));
  
  return $ret;
}

function add_groups_to_og_mailinglist() {
  if (!module_exists('purl') && !module_exists('spaces_og')) {
    $results = db_query("SELECT nid, title FROM node WHERE type = 'group'");
   
    $groups = array();
   
    while ($data = db_fetch_array($results)) {
      $groups[$data['nid']] = $data['title'];
    }
   
    foreach ($groups as $nid => $title) {
      $title = string_to_machine_readable($title);
      db_query("INSERT INTO {og_mailinglist}
               VALUES (%d, '%s')", $nid, $title);
      
      // Subscribe group members to active threads.
      og_mailinglist_create_subscriptions_for_last_month($nid);
    }
  }
  // Else, just use the purl entries
  else {
    $results = db_query("SELECT id, value
                        FROM {purl}
                        WHERE provider = 'spaces_og'");
    $groups = array();
    while ($data = db_fetch_array($results)) {
      $groups[$data['id']] = $data['value'];
    }
    foreach ($groups as $nid => $title) {
      db_query("INSERT INTO {og_mailinglist}
               VALUES (%d, '%s')", $nid, $title);
      
      // Subscribe group members to active threads.
      og_mailinglist_create_subscriptions_for_last_month($nid);
    }
  }
}

/**
 * Creates group thread subscriptions for past 30 days so og_mailinglist
 * works out of the box for previously created threads.
 */
function og_mailinglist_create_subscriptions_for_last_month($gid) {
  module_load_include('inc', 'og_mailinglist', 'og_mailinglist_api');
  
  // Create email subscriptions to group for all group members.
  $results = db_query("SELECT uid
                       FROM {og_uid}
                       WHERE nid = %d", $gid);
  $uids = array();
  while ($data = db_fetch_array($results)) {
    $uids[] = $data['uid'];
  }
  og_mailinglist_save_group_subscriptions($gid, $uids);
  
  $sql = "SELECT n.nid
          FROM {og_ancestry} o
          JOIN {node} n
          ON o.nid = n.nid
          WHERE o.group_nid = %d
          AND n.created > (unix_timestamp() - 2592000)";
          
  $results = db_query($sql, $gid);
  
  while ($data = db_fetch_array($results)) {
    og_mailinglist_save_group_thread_subscriptions($gid, $data['nid']);
  }
}

function string_to_machine_readable($str) {
    $str = strtolower($str);
    $str = str_replace("-", "", $str);
    $str = preg_replace('/[^a-z0-9]/', "-", $str);
    $str = str_replace("--", "-", $str);
    $str = trim($str, " -");
    return $str;
  }