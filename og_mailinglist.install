<?php
/**
 * @file
 * Install, update and uninstall functions for the og_mailinglist module.
 *
 */

// Load our utilities so the hook_requirements can call those functions.
include_once 'og_mailinglist_utilities.inc';

/**
 * Implements hook_install().
 */
function og_mailinglist_install() {
  // Add any previously created groups to og_mailinglist.
  add_groups_to_og_mailinglist();

  // Set OGM's system weight to be after Pathauto so our email footers always use the correct path.
  $weight = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'pathauto')
    ->execute()
    ->fetchField();
  if (!empty($weight)) {
    db_update('system')
    ->fields(array('weight' => $weight + 1))
    ->condition('type', 'module')
    ->condition('name', 'og_mailinglist')
    ->execute();
  }
}

/**
 * Implements hook_uninstall().
 */
function og_mailinglist_uninstall() {
  # http://api.drupal.org/api/drupal/includes!bootstrap.inc/function/variable_del/7
  db_delete('variable')
    ->condition('name', 'og_mailinglist_%', 'LIKE')
    ->execute();
}

/**
 * Implmentation of hook_requirements().
 */
function og_mailinglist_requirements($phase) {
  $requirements = array();
  if ($phase == "runtime") {
    og_mailinglist_phpmailer_load_library();
    $requirements['og_mailinglist_phpmailer']['title'] = t('PHPMailer');
    if (class_exists('PHPMailer')) {
      $requirements['og_mailinglist_phpmailer']['value'] = 'PHPMailer Library is installed correctly';
      $requirements['og_mailinglist_phpmailer']['severity'] = REQUIREMENT_OK;
    }
    else {
      // Required library wasn't found.
      $requirements['og_mailinglist_phpmailer']['value'] = t('Not found');
      // Provide a download link to the PHPMailer library.
      $requirements['og_mailinglist_phpmailer']['description'] = t('The <a href="@phpmailer">PHPMailer</a> library is missing or not installed correctly. <a href="@download">Download</a> and extract it to your <em>og_mailinglist</em> module directory. See the INSTALL.txt file for more information at path/to/drupal@install.', array('@phpmailer' => 'http://phpmailer.worxware.com/index.php?pg=phpmailer', '@download' => 'http://sourceforge.net/projects/phpmailer/files/phpmailer%20for%20php5_6/', '@install' => url(drupal_get_path('module', 'og_mailinglist') . '/INSTALL.txt')));
      $requirements['og_mailinglist_phpmailer']['severity'] = REQUIREMENT_ERROR;
    }

    //Check for the Mail_mimeDecode library.
    og_mailinglist_mimeDecode_load_library();
    $requirements['og_mailinglist_mimeDecode']['title'] = t('Mail_mimeDecode PEAR extension');
    if (class_exists('Mail_mimeDecode')) {
      $requirements['og_mailinglist_mimeDecode']['value'] = 'Mail_mimeDecode PEAR Extension found';
      $requirements['og_mailinglist_mimeDecode']['severity'] = REQUIREMENT_OK;
    }
    else {
      // Required library wasn't found.
      $requirements['og_mailinglist_mimeDecode']['value'] = t('Not found');
      $requirements['og_mailinglist_mimeDecode']['description'] = t('The Mail_mimeDecode PEAR extension is missing or not installed correctly. Check that the extension is installed and that your PHP include_path is correct. See the INSTALL.txt file for more information at path/to/drupal@install.', array('@install' => url(drupal_get_path('module', 'og_mailinglist') . '/INSTALL.txt')));
      $requirements['og_mailinglist_mimeDecode']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}

/**
 * Implements hook_field_schema().
 */
function og_mailinglist_field_schema($field) {
  if ($field['type'] == 'group_email') {
    return array(
      'columns' => array(
        'value' => array(
          'type' => 'text',
          'size' => 'tiny',
          'not null' => FALSE,
        ),
      ),
  );
  }
}

/**
 * Implements hook_schema().
 */
function og_mailinglist_schema() {
  $schema = array();

  $schema['og_mailinglist'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The nid for the new posting.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'group_email' => array(
        'description' => 'The machine/email readable version of the group. Uses purl shortcode if available.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['og_mailinglist_source'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The nid for the new posting.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The cid for the new posting. If 0, means posting was a new node not comment.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'source' => array(
        'type' => 'varchar',
        'description' => 'If the new posting was via email or the web. Should be either "email" or "web"',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'message_id' => array(
        'type' => 'varchar',
        'description' => 'The message-id field of this post, either
        from the email or auto-generated',
        'non null' => TRUE,
        'default' => 0,
        'length' => 255,
      ),
      'in_reply_to' => array(
        'type' => 'varchar',
        'description' => 'The in-reply-to header of this email, either
        from the email or implied from the comment.',
        'non null' => TRUE,
        'default' => 0,
        'length' => 255,
      ),
      'references_header' => array(
        'type' => 'varchar',
        'description' => 'The reference header of this post.
        If it originated from the web, this stores the references + message-id
        of its parent. We use the ungainly title of references_header as references appears
        to be a reserved word for MySQL',
        'non null' => TRUE,
        'default' => 0,
        'length' => 512,
      ),
      'parent_message_id' => array(
        'type' => 'varchar',
        'description' => 'The message-id of the parent of this post.',
        'non null' => TRUE,
        'default' => 0,
        'length' => 255,
      ),
    ),
    'primary key' => array('nid', 'cid'),
    'indexes' => array(
      'source' => array('source'),
      'message_id' => array('message_id'),
    ),
  );

  $schema['og_mailinglist_thread_subscription'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The nid of the thread.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the user who\'s subscribed to this thead.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
  );

  $schema['og_mailinglist_group_subscription'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The nid of the Group.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the User.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'subscription_type' => array(
        'type' => 'varchar',
        'description' => 'Subscription type, e.g. "no email", "digest email", or "email"',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid', 'uid'),
    'indexes' => array(
      'uid' => array('uid'),
      'subscription_type' => array('subscription_type'),
    ),
  );

  return $schema;
}

/**
 * Create the og_mailinglist table.
 */
function og_mailinglist_update_6000() {
  // Create table.
  $ret = array();
  $schema['og_mailinglist'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The nid for the new posting.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'group_email' => array(
        'description' => 'The machine/email readable version of the group. Uses purl shortcode if available.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
  );
  db_create_table('og_mailinglist', $schema['og_mailinglist']);
}

/**
 * Add entries to og_mailinglist for previously created groups.
 */
function og_mailinglist_update_6001() {
  add_groups_to_og_mailinglist();
}

/**
 * Modify og_mailinglist_subscriptions to remove space integration
 */
function og_mailinglist_update_6002() {
  $ret = array();

  db_drop_field('og_mailinglist_subscription', 'space_type');
  db_change_field('og_mailinglist_subscription', 'sid', 'nid', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add columns to og_mailinglist_source to store
 * more information about emails to improve threading on site and email clients.
 */
function og_mailinglist_update_6003() {
  $ret = array();

  db_add_field('og_mailinglist_source', 'message_id', array(
    'type' => 'varchar',
    'description' => 'The message-id field of this post, either
                from the email or auto-generated',
    'non null' => TRUE,
    'default' => 0,
    'length' => 255,
  ));

  db_add_field('og_mailinglist_source', 'in_reply_to', array(
    'type' => 'varchar',
    'description' => 'The in-reply-to header of this email, either
                from the email or implied from the comment.',
    'non null' => TRUE,
    'default' => 0,
    'length' => 255,
  ));

  db_add_field('og_mailinglist_source', 'references', array(
    'type' => 'varchar',
    'description' => 'The reference header of this post.
                If it originated from the web, this stores the references + message-id
                of its parent.',
    'non null' => TRUE,
    'default' => 0,
    'length' => 512,
  ));

  db_add_field('og_mailinglist_source', 'parent_message_id', array(
    'type' => 'varchar',
    'description' => 'The message-id of the parent of this post.',
    'non null' => TRUE,
    'default' => 0,
    'length' => 255,
  ));
}

/**
 * Change name of field to references_header from references.
 */
function og_mailinglist_update_6004() {
  $ret = array();

  db_change_field('og_mailinglist_source', 'references', 'references_header', array(
    'type' => 'varchar',
    'non null' => TRUE,
    'default' => 0,
    'length' => 512,
  )
  );
}

/**
 * Change module weight to ensure we fire after pathauto if its present.
 */
function og_mailinglist_update_6005() {
  $ret = array();

  $weight = db_query("SELECT weight FROM {system} WHERE type = :type AND name = :name", array(':type' => 'module', ':name' => 'pathauto'))->fetchField();
  if (!empty($weight)) {
    db_update('system')
    ->fields(array(
        'weight' => $weight + 1,
      ))
    ->condition('type', 'module')
    ->condition('name', 'og_mailinglist')
    ->execute();
  }
}

function add_groups_to_og_mailinglist() {
  if (!(module_exists('purl') && module_exists('spaces_og'))) {
    $query = db_select('og', 'o');
    $query->join('node', 'n', 'o.etid = n.nid');
    $query->condition('o.entity_type', 'node');
    $query->groupBy('n.nid');
    $query->fields('n', array('nid', 'title'));
    $result = $query->execute();

    foreach ($result as $group) {
      $data = array(
        'nid' => $group->nid,
        'group_email' => string_to_machine_readable($group->title),
      );
      drupal_write_record('og_mailinglist', $data);

      // Subscribe group members to active threads.
      og_mailinglist_create_subscriptions_for_last_month($group->nid);
    }
  }
  // Else, just use the purl entries
  else {
    $query = db_select('purl', 'p');
    $query->condition('p.provider', 'spaces_og');
    $query->groupBy('p.id');
    $query->fields('p', array('id', 'value'));
    $result = $query->execute();

    foreach ($result as $group) {
      $data = array(
        'nid' => $group->id,
        'group_email' => $group->value,
      );
      drupal_write_record('og_mailinglist', $data);

      // Subscribe group members to active threads.
      og_mailinglist_create_subscriptions_for_last_month($group->id);
    }
  }
}

/**
 * Creates group thread subscriptions for past 30 days so og_mailinglist
 * works out of the box for previously created threads.
 */
function og_mailinglist_create_subscriptions_for_last_month($gid) {
  module_load_include('inc', 'og_mailinglist', 'og_mailinglist_api');

  // Create email subscriptions to group for all group members.
  $results = db_query("SELECT etid AS uid FROM {og_membership}
                      WHERE entity_type = :type
                      AND gid = :gid",
                      array(
                        ':type' => 'user',
                        ':gid' => $gid,
                      ));
  $uids = array();
  foreach ($results as $data) {
    $uids[] = $data->uid;
  }
  og_mailinglist_save_group_subscriptions($gid, $uids);

  $results = db_query("SELECT etid AS nid
          FROM {og_membership}
          WHERE gid = :gid
          AND entity_type = :type
          AND created > :monthago",
          array(
            ':gid' => $gid,
            ':type' => 'node',
            // 2592000 seconds is 30 days
            ':monthago' => time() - 2592000,
          ));

  foreach ($results as $data) {
    og_mailinglist_save_group_thread_subscriptions($gid, $data->nid);
  }
}

function string_to_machine_readable($str) {
  $str = strtolower($str);
  $str = str_replace("-", "", $str);
  $str = preg_replace('/[^a-z0-9]+/', "-", $str);
  $str = trim($str, " -");
  return $str;
}
