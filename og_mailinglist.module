<?php
/**
 * @file
 * OG Mailinglist core and administration.
 *
 * This module allows users to email a Drupal installation running the Exim
 * email server to create discussions and respond to comments. Because it is
 * tied directly to Exim, Postfix, Qmail or Mailgun, email is processed
 * immediately upon receipt in the mail server.  Mails should be sent to
 * group_prefix@server.com rather than to a single email address.
 *
 * Original version written by Conan Albrecht, March 2009.
 * Maintained since by Kyle Mathews.
 * Upgrade to Drupal 7 started by clee_uftwf, continued by sethfisher, then
 * by mahfiaz and it's still going on.
 */

/**
 * @name OG Mailinglist build modes.
 */
define('OG_MAILINGLIST_BUILD_FULL', 'og_mailinglist_full');

require_once "og_mailinglist_phpmailer.inc";
require_once "og_mailinglist_api.inc";
og_mailinglist_phpmailer_load_library();

/**
 * Implements hook_menu().
 */
function og_mailinglist_menu() {
  # The following item is copied from og.module, otherwise it would be
  # necessary to enable og_ui before og_mailinglist just for config menu.
  $items['admin/config/group'] = array(
    'title' => 'Organic groups',
    'description' => 'Administer the suite of Organic groups modules.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer group'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/group/mailinglist'] = array(
    'title' => 'Organic groups mailinglist',
    'description' => t('Configure posts/comments generated from email'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_admin_settings'),
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/group/mailinglist/config'] = array(
    'title' => 'Configuration',
    'description' => t('Configure posts/comments generated from email'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['og_mailinglist/subscriptions'] =
  $items['user/%user/og_mailinglist'] = array(
    'title' => t('Group subscriptions'),
    'description' => t('Allows users to manage their group subscriptions'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_subscriptions_settings_form', 1),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  $items['og_mailinglist/subscriptions']['type'] = MENU_CALLBACK;
  $items['og_mailinglist/subscriptions']['title'] = t('OG Mailinglist subscriptions');

  $items['og_mailinglist/unsubscribe/%node'] = array(
    'title' => t('Unsubscribe from post'),
    'description' => t('Users who hit this page will not get more emails for comments on the node.'),
    'type' => MENU_CALLBACK,
    'page callback' => 'og_mailinglist_unsubscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  $items['og_mailinglist/subscribe/%node'] = array(
    'title' => t('Subscribe to post'),
    'description' => t('Users who hit this page will get emails for comments on the node.'),
    'type' => MENU_CALLBACK,
    'page callback' => 'og_mailinglist_subscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  $items['og_mailinglist'] = array(
    'page callback' => 'og_mailinglist_post',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'og_mailinglist_transport.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function og_mailinglist_permission() {
  return array(
    'manage og_mailinglist subscriptions' => array(
      'title' => t('Manage mailinglist subscriptions'),
      'description' => t('Subscribe or unsubscribe other people to/from a group.'),
    ),
  );
}

/**
 * Admin settings form
 */
function og_mailinglist_admin_settings() {
  $form['og_mailinglist_server_string'] = array(
    '#title' => t('Domain name'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_server_string', $_SERVER['SERVER_NAME']),
    '#description' => t('Domain name for outgoing/incoming emails, e.g. example.com.'),
  );
  $form['og_mailinglist_max_message_size'] = array(
    '#title' => t('Maximum message body size (excluding attachments) (in Kb)'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_message_size', '100'),
    '#description' => t('Any messages over this size will be rejected.  Set to 0 for unlimited.'),
  );
  $form['og_mailinglist_max_posts_per_hour'] = array(
    '#title' => t('Maximum posts per hour'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_posts_per_hour', '20'),
    '#description' => t('The maximum number of messages a user is able to post per hour by email.  Set to 0 for unlimited.'),
  );
  $form['og_mailinglist_reply_to_group'] = array(
    '#title' => t('Add a Reply-To header to outgoing group emails'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('og_mailinglist_reply_to_group', '0'),
    '#description' => t('Set an explicit reply-to header. See http://wiki.list.org/pages/viewpage.action?pageId=4030691 for pros and cons on this setting.'),
  );
  $form['og_mailinglist_thread_comments'] = array(
    '#title' => t('Thread comments, using In-Reply-To header'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('og_mailinglist_thread_comments', '0'),
    '#description' => t('New comments will be threaded on save. Existing comments will not be affected.'),
  );
  $form['og_mailinglist_add_signatures'] = array(
    '#title' => t('Add user signatures to nodes and comments created on the site'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('og_mailinglist_add_signatures', '1'),
    '#description' => t('Add a user\'s signature if they have one.'),
  );
  $node_types = _node_types_build()->types;
  $n_types = array();
  foreach ($node_types as $type) {
    $n_types[$type->type] = $type->name;
  }
  $form['og_mailinglist_default_content_type'] = array(
    '#title' => t('Default content type'),
    '#type' => 'select',
    '#default_value' => variable_get('og_mailinglist_default_content_type', 'story'),
    '#options' => $n_types,
    '#description' => t('Choose the default content type to be created from new emails.'),
  );
  $form['og_mailinglist_exclude_content_types'] = array(
    '#title' => t('Exclude the following content types'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#default_value' => variable_get('og_mailinglist_exclude_content_types', 'group'),
    '#options' => $n_types,
    '#description' => t('Do not send emails on creation of these content types.'),
  );
  $form['og_mailinglist_default_group_subscription_type'] = array(
    '#title' => t('Default group email subscription type'),
    '#type' => 'select',
    '#default_value' => variable_get('og_mailinglist_default_group_subscription_type', 'email'),
    '#options' => array(
      'email' => t('Email'),
      'digest email' => t('Digest email'),
      'no email' => t('No email'),
    ),
    '#description' => t('Choose the default email subscription for users joining a new group. "Email" means the user will receive an email for each new post. "No email" means the user will recieve no emails except for discussion threads they participate in. "Digest" is the same as "no email" except the user will also receive digest emails. (Users can change this later at http://example.org/user/%user/og_mailinglist)'),
  );

  // Save an incoming key by default.
  if ((variable_get('og_mailinglist_incoming_key', '')) == '') {
    variable_set('og_mailinglist_incoming_key',   md5(rand()));
  }

  $form['og_mailinglist_incoming_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Message validation string'),
    '#default_value' => variable_get('og_mailinglist_incoming_key', md5(rand())),
    '#required' => TRUE,
    '#description' => t('This string will be used to validate incoming messages.  It can be anything, but must be used on both sides of the transfer. For more see the INSTALL.txt for your Mail Transfer Agent.'),
  );
  $form['og_mailinglist_test_email_address'] = array(
    '#title' => t('DEBUGGING: Send an email for all events to a user account'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_test_email_address', ''),
    '#description' => t('For testing / monitoring purposes, you can set one user account to receive all emails sent by OG Mailinglist. Enter the User ID of the user who should receive all emails.'),
  );

  return system_settings_form($form);
}

/**
 * Build subscription admin for for each user.
 */
function og_mailinglist_subscriptions_settings_form($form, $account) {
  global $user;
  $uid = $user->uid;
  if (is_object($account)) {
    $uid = $account->uid;
  }

  $result = db_query('SELECT m.nid as gid, m.subscription_type, n.title
          FROM {og_mailinglist_group_subscription} m, {node} n
          WHERE m.nid = n.nid
          AND m.uid = :uid
          ORDER BY n.title', array(':uid' => $uid));

  $subscription_options = array(
    'email' => t('Email'),
    'digest email' => t('Digest email'),
    'no email' => t('No email'),
  );
  $form = array();

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );

  foreach($result as $group) {
    $form[$group->gid] = array(
      '#type' => 'fieldset',
      '#title' => l(t($group->title), "node/" . $group->gid),
      '#tree' => TRUE,
    );
    $form[$group->gid]['subscription-type'] = array(
      '#type' => 'select',
      '#default_value' => $group->subscription_type,
      '#title' => t("Email Settings"),
      '#options' => $subscription_options,
    );
    $form[$group->gid]["leave-group"] = array(
      '#type' => 'checkbox',
      '#title' => t("Leave the @name group",
        array('@name' => t($group->title))),
      '#suffix' => "<hr />",
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  );

  return $form;
}

/**
 * Form submit handler.
 */
function og_mailinglist_subscriptions_settings_form_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  unset($form_state['values']['uid']);
  foreach ($form_state['values'] as $gid => $settings) {
    // We only care about GIDs and their values.
    if (is_numeric($gid)) {
      og_mailinglist_update_group_subcription_type($gid, $uid, $settings['subscription-type']);

      if ($settings['subscription-type']['#value'] != "email") {
        og_mailinglist_delete_group_threads($gid, $uid);
      }

      // If they choose to leave the group.
      if ($settings['leave-group']) {
        og_ungroup($gid, 'user', $uid);
        $group_name = db_query("SELECT title FROM {node} WHERE nid = :nid", array(':nid' => $gid))->fetchField();
        drupal_set_message(
          t("You are no longer in the <a href='@gid'>@group_name</a> group.",
          array(
            "@gid" => url("node/" . $gid),
            "@group_name" => $group_name,
          )));
      }
    }
  }
  drupal_set_message(t('Your group subscriptions were updated.'));
}

/**
 * Callback function for unsubscribing from a thread.
 */
function og_mailinglist_unsubscribe_thread($node) {
  global $user;
  $success = og_mailinglist_delete_thread_subscription($node->nid, $user->uid);

  if ($success) {
    return '<div class="messages success">'
      . t('You were successfully unsubscribed from the post @link.',
          array('@link' => '<em>' . l($node->title, "node/" . $node->nid) . '</em>'))
      . '&nbsp;&nbsp;'
      . l(t('Undo'), 'og_mailinglist/subscribe/' . $node->nid,
          array('attributes' => array('id' => 'og_mailinglist_undo')))
      . '</div>';
  }
  else {
    return t('Something unexpected happened and we were not able to unsubscribe you from this post. Please contact your site administrator.');
  }
}

/**
 * Callback function for subscribing to a thread.
 */
function og_mailinglist_subscribe_thread($node) {
  global $user;
  og_mailinglist_save_thread_subscriptions($node->nid, array($user->uid));

  return '<div class="messages success">'
    . t('You were successfully subscribed to the post @link.',
        array('@link' => '<em>' . l($node->title, "node/" . $node->nid) . '</em>'))
    . '&nbsp;&nbsp;'
    . l(t('Undo'), 'og_mailinglist/unsubscribe/' . $node->nid,
        array('attributes' => array('id' => 'og_mailinglist_undo')))
    . '</div>';
}

/**
 * Implements hook_form_alter().
 */
function og_mailinglist_form_node_form_alter(&$form, $form_state, $form_id) {
    if (og_is_group_type('node', $form['#node']->type)) {
      if (!module_exists('purl') && !module_exists('spaces_og')) {
        $group_email = "";
        if (isset($form['nid']['#value'])) {
          $group_email = db_query("SELECT group_email
                                             FROM {og_mailinglist}
                                             WHERE nid = :nid", array(':nid' => $form['nid']['#value']))->fetchField();
        }
        // Add our form, compatible with purl's form.
        $form['og_mailinglist'] = array(
          '#title' => t('Group Email Address'),
          '#type' => 'textfield',
          '#description' => t('Choose an email address prefix for your group. May contain only lowercase letters, numbers, dashes and underscores. e.g. "my-group".'),
          '#field_suffix' => '@' . variable_get('og_mailinglist_server_string', $_SERVER['SERVER_NAME']),
          '#size' => 20,
          '#default_value' => $group_email,
          '#weight' => -1,
          '#maxlength' => 255,
          '#required' => TRUE,
          '#tree' => TRUE,
          '#element_validate' => array('og_mailinglist_group_form_validate'),
        );
        // Make sure our submit function is second after node_form_submit.
        $first = array_shift($form['actions']['submit']['#submit']);
        array_unshift($form['actions']['submit']['#submit'], $first, "og_mailinglist_group_form_submit");
      }
      // If Spaces OG is already using purl to get a shortcode, we'll use that
      // shortcode instead of collecting another one.
      else {
        // Modify the title and description to match our custom form.
        $form['purl']['value']['#title'] = t('Group Email Address Prefix');
        $form['purl']['value']['#description'] = t('Choose an email address prefix for your group. May contain only lowercase letters, numbers, dashes and underscores. e.g. "my-group".');

        // Make sure our submit function is second after node_form_submit.
        $first = array_shift($form['actions']['submit']['#submit']);
        array_unshift($form['actions']['submit']['#submit'], $first, "og_mailinglist_group_form_submit");
      }
    }
}

/**
 * Validation handler for og_mailinglist_group_form. Check that submitted
 * email username is valid.
 */
function og_mailinglist_group_form_validate($element, &$form_state) {
  // First check the email address isn't already being used.
  $query = db_select('og_mailinglist', 'ogm');
  $query->fields('ogm', array('group_email'));
  $query->condition('group_email', $element['#value']);
  if ($form_state['values']['nid']) {
    $query->condition('nid', $form_state['values']['nid']);
  }
  $result = $query->execute()->fetchField();
  if ($result) {
    form_error($element, t('Someone has already choosen that group email address. Please choose another.'));
  }
  // Then check that the email address is valid.
  else if (preg_match('!^[\.a-z0-9_-]+$!', $element['#value'])) {
    return true;
  }
  else {
    form_error($element, t('Your group email address may contain only lowercase letters, numbers, dashes and underscores. e.g. "my-group'));
  }
}

/*
 * Submit handler for og_mailinglist_group_form.
 */
function og_mailinglist_group_form_submit($form, &$form_state) {
  $group_email = "";
  if (isset($form_state['values']['purl']['value'])) {
    $group_email = $form_state['values']['purl']['value'];
  }
  else {
    $group_email = $form_state['values']['og_mailinglist'];
  }

  og_mailinglist_save_group($form_state['nid'], $group_email);

}

/**
 * Implements hook_node_insert().
 */
function og_mailinglist_node_insert($node) {
  if ($node->status) {
    $group_node = _og_mailinglist_load_group(array($node->nid));

    // If this node isn't part of a group, return.
    if (empty($group_node)) {
      return;
    }

    // If the Maillog module has been set to turn off emails, return.
    if (!variable_get('maillog_send', TRUE)) {
      return;
    }

    // If this content type doesn't use email notifications, then return.
    $excluded_content_types = variable_get('og_mailinglist_exclude_content_types', array());
    if (in_array($node->type, $excluded_content_types)) {
      return;
    }

    // User might not be automatically subscribed to new threads. Subscribe now if they aren't signed up to get emails normally.
    if (og_mailinglist_get_group_subscription_type($group_node->nid, $node->uid) != "email") {
      og_mailinglist_save_thread_subscriptions($node->nid, array($node->uid));
    }
    // Send emails
    og_mailinglist_send_node_email($node);
  }
}

/**
 * Implements hook_node_load().
 */
function og_mailinglist_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (og_is_group_type('node', $node->type) && isset($node->nid)) {
      // Load the group's email.
      $ogm_email = db_query("SELECT group_email
        FROM {og_mailinglist}
        WHERE nid = :nid",
        array(':nid' => $node->nid))->fetchField();
      $node->ogm_email = $ogm_email;
    }
  }
}

/**
 * Implements hook_comment_publish().
 */
function og_mailinglist_comment_publish($comment) {
  if (TRUE) {
    // If this the Maillog module has been set to turn off emails, return.
    if (!variable_get('maillog_send', TRUE)) {
      return;
    }

    // Check that the node is published.
    $node = node_load($comment->nid);
    $group_node = _og_mailinglist_load_group(array($node->nid));
    if ($node->status && is_object($group_node)) {
      // User might not be subscribed to thread. Subscribe them now if not
      // already subscribed.
      if (!og_mailinglist_check_user_subscribed_to_thread($comment->nid, $comment->uid)) {
        og_mailinglist_save_thread_subscriptions($comment->nid, array($comment->uid));
      }

      og_mailinglist_send_comment_email($comment, $node);
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 *
 * Add a og_mailinglist subscription when a user joins a group.
 */
function og_mailinglist_og_membership_insert($membership) {
  global $user;
  og_mailinglist_save_group_subscriptions($membership->gid,
    array($user->uid));
}

/**
 * Implements hook_og_membership_delete().
 *
 * Remove a og_mailinglist subscription when a user leaves a group.
 */
function og_mailinglist_og_membership_delete($membership) {
  global $user;
  og_mailinglist_delete_group_subscriptions($membership->gid,
    array($user->uid));
}

/**
 * Implements hook_filter_info().
 */
function og_mailinglist_filter_info() {
  $filters['filter_email_quote_hider'] = array(
    'title' => t('Hide quotations in emails'),
    'description' => t('Finds quoted text from comments created via email and adds Show / Hide link.'),
    'process callback' => '_og_mailinglist_build_quotes_toggle',
    'tips callback' => '_og_mailinglist_filter_tips',
    'settings callback' => '_og_mailinglist_filter_settings',
    'default settings' => array(
      'og_mailinglist_filter_quotations' => 'hidden',
      'og_mailinglist_filter_email' => 1,
    ),
  );
  return $filters;
}

function _og_mailinglist_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;
  
  $settings['og_mailinglist_filter_quotations'] = array(
    '#title' => t('Quotations style'),
    '#type' => 'radios',
    '#options' => array(
      'hidden' => t('Quotations will be hidden with a JavaScript "Show" link. (default)'),
      'removed' => t('Quotations will be removed altogether.'),
    ),
    '#default_value' => $filter->settings['og_mailinglist_filter_quotations'],
    '#description' => t('E-mail style quotations are lines starting with ">" marks.'),
  );
  $settings['og_mailinglist_filter_email'] = array(
    '#title' => t('Hide email addresses.'),
    '#type' => 'checkbox',
    '#default_value' => $filter->settings['og_mailinglist_filter_email'],
    '#description' => t('If checked, email addresses will be replaced with ***@***.*** (enabled by default)'),
  );
  return $settings;
}

function _og_mailinglist_filter_tips($filter, $format, $long = FALSE) {
  if ($long){
    $output = t('Email quotation hider hides all quotations by default and provides a link to show quoted text. <br>');
    $output .= t('It also replaces all e-mail addresses with ***@***.***');
    return $output;
  }
  else {
    return t('Email quotation hider makes quotations in emails hidden by default and replaces all email addresses with ***@***.***');
  }
}

/**
 * Surround quotes within an email text to make the text hidden by default.
 *
 * @param string $text
 *  Text where to hide quotes.
 *
 * @param $filter
 *  Filter passes on e.g settings.
 *
 * @return
 *  Text with hidden quotes, contains HTML.
 */
function _og_mailinglist_build_quotes_toggle($text, $filter) {
  module_load_include('inc', 'og_mailinglist', 'og_mailinglist_filter');

  if ($filter->settings['og_mailinglist_filter_quotations'] == 'removed') {
    # Remove all quoted text instead.
    return _og_mailinglist_remove_quotes($text);
  }
  $text = str_replace(array('\r\n', '\r'), '\n', $text);
  $quotes = _og_mailinglist_find_quoted_sections($text);

  if (!empty($quotes)) {
    foreach ($quotes as $quote) {
      // Run the quote through the Line break filter before replacing it in the text.
      // Otherwise the HTML Converter input filter will bork the HTML. This *could* be a
      // potential problem if someone doesn't want the Line Break filter run.
      $filtered_quote = _filter_autop($quote);
      $replace = '<br /><span class="toggle-quoted-text">- '
        . t('Show quoted text')
        . ' -</span><div class="quoted-text">'
        . $filtered_quote . '</div>';
      $text = str_replace($quote, $replace, $text);
      
      if ($filter->settings['og_mailinglist_filter_email'] == 1) {
        // Remove email addresses. Regex borrowed from valid_email_address().
        $regex = "([a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+@(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+)";
        $text = preg_replace($regex, '***@***.***', $text);
      }
    }
  }

  return $text;
}

/**
 * Remove quotes from e-mail text entirely.
 *
 * @param string $text
 *  Text to remove quotes from.
 *
 * @return
 *  Text with quotes removed.
 */
function _og_mailinglist_remove_quotes($text) {
  module_load_include('inc', 'og_mailinglist', 'og_mailinglist_filter');
  $text = str_replace(array('\r\n', '\r'), '\n', $text);
  $quotes = _og_mailinglist_find_quoted_sections($text);
  if (!empty($quotes)) {
    foreach ($quotes as $quote) {
      $text = str_replace($quote, '', $text);
    }
  }
  return $text;
}

/**
 * Implements hook_cron().
 */
function og_mailinglist_cron() {
  // On first run, set digest to run today.
  $next_digest_runtime = variable_get('og_mailinglist_digest_runtime',
          mktime(17, date("I"), date("s"), date("n"), date("j")));

  if (REQUEST_TIME > $next_digest_runtime) {
    module_load_include('inc', 'og_mailinglist', 'og_mailinglist_digest_email');

    // Send off digest emails.
    _og_mailinglist_send_digest_emails();

    // Set tomorrow's run time.
    variable_set('og_mailinglist_digest_runtime', mktime(17, date("I"), date("s"), date("n"), date("j") + 1));
  }
}

/**
 * Implements hook_help().
 */
function og_mailinglist_help($path, $args) {
  switch ($path) {
    case 'admin/help#og_mailinglist':
      $text = file_get_contents( dirname(__FILE__) . "/README.txt");
      return check_markup($text, 'plain_text');
  }
}

/**
 * Implements hook_content_build_modes().
 **/
function og_mailinglist_content_build_modes() {
  return array(
    'og_mailinglist' => array(
      'title' => t('OG Mailinglist'),
      'build modes' => array(
        'og_mailinglist_full' => array(
          'title' => t('OG Mailinglist Full'),
          'views style' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function og_mailinglist_block_info() {
  $blocks['group_actions'] = array(
    'info' => 'OG Mailinglist group actions',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function og_mailinglist_block_view($delta) {
  $block = array();
  $block['subject'] = t('Group settings');
  $block['content'] = og_mailinglist_get_block();
  return $block;
}

/**
 * Generate block html.
 */
function og_mailinglist_get_block() {
  global $user;

  // Only display group details if we have a group context and we are subscribed.
  if (($group_node = og_context()) && node_access('view', $group_node)) {
    list($txt, $subscription) = og_subscriber_count_link($group_node);
    if ($subscription == 'active') {
      $output .=
        drupal_get_form('og_mailinglist_subscription_settings_form', $group_node);
    }
  }
  return $output;
}

function og_mailinglist_subscription_settings_form($form, &$form_state, $group_node) {
  global $user;

  $subscription_type = db_select('og_mailinglist_group_subscription', 's')
    ->fields('s', array('subscription_type'))
    ->condition('s.uid', $user->uid)
    ->condition('s.nid', $nid)
    ->execute()
    ->fetchField();

  $subscription_options = array(
    'email' => t('Email'),
    'digest email' => t('Digest email'),
    'no email' => t('No email'),
  );
  $form = array();

  $email = $group_node->ogm_email . "@" . variable_get('og_mailinglist_server_string', $_SERVER['SERVER_NAME']);
  $form['email'] = array(
    '#type' => 'item',
    '#title' => t('Email address for this group'),
    '#value' => l($email, 'mailto:' . $email),
  );

  $form[$data['gid']] = array(
    '#type' => 'item',
    '#tree' => TRUE,
  );

  $form[$data['gid']]['subscription-type'] = array(
    '#type' => 'select',
    '#title' => "Email Settings",
    '#default_value' => $data['subscription_type'],
    '#options' => $subscription_options,
  );
  $form[$data['gid']]["leave-group"] = array(
    '#type' => 'checkbox',
    '#title' => "Leave this group",
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  );

  $form['submit']['#submit'] = array('og_mailinglist_subscriptions_settings_form_submit');

  return $form;
}
