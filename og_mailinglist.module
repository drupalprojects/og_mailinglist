<?php
// $Id$
// TODO -- rewrite this header part according to the normal Drupal style
// TODO write docs for functions.
###############################################################################
###   This module allows users to email a Drupal installation running the
###   Exim email server to create discussions and respond to comments.
###   Because it is tied directly to Exim, emails are processed immediately
###   upon receipt in the mail server.  Mails should be sent to purl_group_prefix@server.com
###   rather than to a single email address.
###
###   Original version written by Conan Albrecht   March 2009
###   Maintained since by Kyle Mathews
###

require_once("phpmailer/class.phpmailer.php");
require_once("og_mailinglist_phpmailer.inc");
require_once('og_mailinglist_api.inc');

/**
 * Implementation of hook_menu(). 
 */
function og_mailinglist_menu() {
  # Administration
  $items['admin/messaging/og_mailinglist'] = array(
    'title' => 'OG Mailinglist',
    'description' => t('Configure discussions/comments generated from email'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_admin_settings'),
    'access arguments' => array('administer notifications'),
  );
  $items['og_mailinglist/subscriptions'] = array(
    'title' => t('Manage Group Subscriptions'),
    'description' => t('Allows users to manage their space subscriptions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_subscriptions_settings_form'),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  $items['og_mailinglist/unsubscribe/%node'] = array(
    'title' => t('Unsubscribe from discussion'),
    'description' => t('Users who hit this page will not get more emails for
                       comments on the node.'),
    'page callback' => 'og_mailinglist_unsubscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  $items['og_mailinglist/subscribe/%node'] = array(
    'title' => t('Subscribe to discussion'),
    'description' => t('Users who hit this page will not get more emails for
                       comments on the node.'),
    'page callback' => 'og_mailinglist_subscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('manage og_mailinglist subscriptions'),
  );
  return $items;
}

/*
 * Implementation of hook_perm().
 */
function og_mailinglist_perm() {
  return array('manage og_mailinglist subscriptions');
}

/*
 * Implementation of hook_init().
 */
function og_mailinglist_init() {
  drupal_add_css(drupal_get_path('module', 'og_mailinglist') . "/og_mailinglist.css");
  drupal_add_js(drupal_get_path('module', 'og_mailinglist') . "/og_mailinglist.js");
}

/** Implementation of hook_help */
function og_mailinglist_help($path, $arg) {
  switch ($path) {
    case 'admin/messaging/og_mailinglist':
      return '<p>' . t("OG_Mailinglist allows users to start new discussions by email and post comments on existing discussions
       by simply replying to emails.  It plugs directly into the Exim mail server, which allows it to process emails
       immediately upon receipt in the system.  It assumes you are using the Organic Groups, Spaces, and PURL modules for groups.  It also assume your installed mail server is Exim 4. 
       Instructions are as follows:
       <ul>
         <li>To start a discussion, a group member should send email to groupname@yoursite.com.
         <li>To post a comment on an existing discussion, a group member should simply reply to the autogenerated
             email he or she receives.
       </ul> 
       Important notes:
       <ul>
         <li>You must customize the DRUPAL_DIR variable in og_mailinglist_exim4_bootstramp_command_line.php file to point at your
             Drupal installation.  
         <li>You must install the router and transport into your Exim4 configuration files.  See the documentation for information
             about setting this up and testing it.
         <li>This module essentially allows group members to post to your site directly from their email box -- it bypasses
             their login name and password and simply matches the email address.  This can be spoofed by anyone smart enough 
             to do it.  The module has some security in place, but by its very nature, it is a potential security risk.  Use
             this module only on sites where this is acceptable.
       </ul>");
  }
}

/** Admin settings form */
function og_mailinglist_admin_settings() {
  $form['og_mailinglist_server_string'] = array(
    '#title' => t('Domain name'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_server_string', 'example.com'),
    '#description' => t('Domain name for outgoing/incoming emails, e.g. example.com.'),
  );
  $form['og_mailinglist_max_message_size'] = array(
    '#title' => t('Maximum message size (in Kb)'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_message_size', '100'),
    '#description' => t('Any messages over this size will be rejected.  Set to 0 for unlimited.'),
  );
  $form['og_mailinglist_max_posts_per_hour'] = array(
    '#title' => t('Maximum posts per hour'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_posts_per_hour', '20'),
    '#description' => t('The maximum number of messages a user is able to post per hour by email.  Set to 0 for unlimited.'),
  );
  $form['og_mailinglist_test_email_address'] = array(
    '#title' => t('Send all emails to user account'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_test_email_address', ''),
    '#description' => t('For testing / monitoring purposes, you can set one user account to receive all emails. Enter the User ID of the user who should receive all emails.'),
  );
// TODO add form to choose default content type
  return system_settings_form($form);
}

function og_mailinglist_subscriptions_settings_form() {
  global $user;
  
  $sql = 'SELECT m.sid as gid, m.subscription_type, n.title
          FROM {og_mailinglist_subscription} m, {node} n
          WHERE m.sid = n.nid
          AND m.uid = %d
          AND m.space_type = "og"
          ORDER BY n.title';
  
  $results = db_query($sql, $user->uid);
  
  $subscription_options = array(
    'email' => t('Email'),
    'no email' => t('No email'),
    'digest email' => t('Digest email'),
  );
  // TODO improve formatting + add way to unsubscribe from group (checkboxs maybe)?
  $form = array();
  
  while ($data = db_fetch_array($results)) {
    $form['og_mailinglist_og'][$data['gid']] = array(
      '#type' => 'select',
      '#title' => l(t($data['title']), "node/" . $data['gid']),
      '#default_value' => $data['subscription_type'],
      '#options' => $subscription_options,
    );
  }
  
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save')
    );
  
  return $form;
}

function og_mailinglist_subscriptions_settings_form_submit($form, &$form_state) {
  global $user;
  foreach ($form_state['values'] as $gid => $sub_type) {
    // We only care about GIDs and their values.
    if (is_numeric($gid)) {
      db_query("UPDATE {og_mailinglist_subscription}
               SET subscription_type = '%s'
               WHERE uid = %d
               AND sid = %d
               AND space_type = 'og'", $sub_type, $user->uid, $gid);
      
      if ($sub_type != "email") {
        og_mailinglist_delete_group_threads($gid, $user->uid);
      }
    }
  }
  drupal_set_message("Group subscriptions updated.");
}

function og_mailinglist_unsubscribe_thread($node) {
  global $user;
  $success = og_mailinglist_delete_thread_subscription($node->nid, $user->uid);
  
  if ($success) {
    return "<div class='messages success'>You were successfully unsubscribed from
    the discussion <em>" . l($node->title, "node/" . $node->nid) . " </em>&nbsp;&nbsp; 
     " . l("Undo", "og_mailinglist/subscribe/" . $node->nid, array("attributes" => array("id" => "og_mailinglist_undo")))
           . "</div>";
  }
}

function og_mailinglist_subscribe_thread($node) {
  global $user;
  og_mailinglist_save_thread_subscriptions($node->nid, array($user->uid));
  
  return "<div class='messages success'>You were successfully subscribed to
    the discussion <em>" . l($node->title, "node/" . $node->nid) . " </em>&nbsp;&nbsp; 
     " . l("Undo", "og_mailinglist/unsubscribe/" . $node->nid, array("attributes" => array("id" => "og_mailinglist_undo")))
           . "</div>";
}

/*
 * Implementation of hook_nodeapi().
 */
function og_mailinglist_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == "insert" && $node->status && $node->type != "eduglu_group_reader_feed") { // TODO create hook so individual features can turn off
    // email notifications + on admin interface, let people turn off notifications there as well.
    
    // User might not be automatically subscribed to new threads. Subscribe now if they aren't signed up to get emails normally.
    if (og_mailinglist_get_group_subscription_type($node->og_groups[0], $node->uid) != "email") {
      og_mailinglist_save_thread_subscriptions($node->nid, array($node->uid));
    }    
    // Send emails
    og_mailinglist_send_node_email($node);
  }
}

function og_mailinglist_comment($comment, $op) {
  // $comment can be an object or an array.
  $comment = (object)$comment;

  if ($op == 'publish') {
    // Check that the node is published.
    $node = node_load($comment->nid);    
    if ($node->status) {
      og_mailinglist_send_comment_email($comment, $node);
      
      // User might not be subscribed to thread. Subscribe them now if not
      // already subscribed.
      if (!og_mailinglist_check_user_subscribed_to_thread($comment->nid, $comment->uid)) {
        og_mailinglist_save_thread_subscriptions($comment->nid, array($comment->uid));
      }
    }
  }
}

/**
 * Implementation of hook_og().
 *
 * Add a og_mailinglist subscription when a user joins a group
 * and delete should they leave.
 */
function og_mailinglist_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
      og_mailinglist_save_group_subscriptions($gid, 'og', array($uid));
      break;
    
    case 'user delete':
      og_mailinglist_delete_group_subscriptions($gid, 'og', array($uid));
      break;
  }
}

/**
 * Implementation of hook_filter().
 */
function og_mailinglist_filter($op, $delta = 0, $format = -1, $text = "") {
  switch ($op) {
    case 'list':
      return array(
        0 => t('Hide quoted text from comments created via email')
      );
    
    case 'description':
      return t('Finds quoted text from comments created via email and hides them.');
      
    case 'prepare':
      return $text;
    
    case 'process':
      return _og_mailinglist_build_quotes_toggle($text);
  }
}

function _og_mailinglist_build_quotes_toggle($text) {
  $quotes = _og_mailinglist_find_quoted_sections($text);
  
  if (!empty($quotes)) {
    foreach ($quotes as $quote) {
      $replace = '<br /><span class="toggle-quoted-text">- Show quoted text -</span><div class="quoted-text">'. $quote .'</div>';
      $text = str_replace($quote, $replace, $text);    
    }
  } 
  
  return $text;
}

// TODO would be useful at some point to add option to truncate long words
// URLs tend to stick out side of comment box which is ugly.
function _og_mailinglist_remove_quotes($text) {
  $quotes = _og_mailinglist_find_quoted_sections($text);
  if (!empty($quotes)) {
    foreach ($quotes as $quote) {
      $text = str_replace($quote, '', $text);
    }
  }
  return $text;
}

// Possible way to simplify this. Drop the find start of quoted section and loop through it
// and just do as doing with Hotmail/Outlook and other clients that don't quote
// properly and match all the quoted section w/ regex.
// This rests on the assumption that everyone will either top-post or
// properly trim their emails where they bottom post. It seems the vast majority
// of people do that.
// Making the switch would vastly simplify the code.
// We could then hold the regex for each email client in an array and just pass
// that and the text into a function. 
function _og_mailinglist_find_quoted_sections($text) {
  $quotes = array();
  
  // Some email clients are "special". They don't like to place ">" in front of
  // quotes. We need to give them their own special functions.
  $quotes[] = array();
  $quotes[] = _og_mailinglist_filter_hotmail_quotes($text);
  $quotes[] = _og_mailinglist_filter_outlook_quotes($text);
  $quotes[] = _og_mailinglist_filter_android_gmail_quotes($text);
  $quotes[] = _og_mailinglist_filter_unknown_client_quotes($text);
  $quotes[] = _og_mailinglist_filter_unknown_client2_quotes($text);
  $quotes[] = _og_mailinglist_filter_unknown_client3_quotes($text);
  $quotes[] = _og_mailinglist_filter_unknown_client4_quotes($text);
  $quotes[] = _og_mailinglist_filter_quotes($text);
  
  // Identify the longest quoted section of all possible matches and only
  // remove that one.
  $quotes = _og_mailinglist_longest_string($quotes);
  
  return $quotes;
}

/*
 * Identify the longest quoted section as that should contain all the others
 * that are possibly within it.
 */
function _og_mailinglist_longest_string ($quotes) {
  $longest = array();
  foreach($quotes as $quote) {
    if (key($longest) < strlen(implode("", $quote))) {
      $longest = array(strlen(implode("", $quote)) => $quote);
    }
  }
  
  return end($longest);
}

/*
 * Loops through the text line by line. If a line matches the header of
 * an email client's quoted section, that line is marked as a beginning of a
 * quoted section. Each succeeding line which starts with a ">"
 * (the traditional indicator for email quote) is included in the quoted section.
 **/
function _og_mailinglist_filter_quotes($text) {
  $lines = explode("\n", $text);
  $quotes = array();
  $count = 0;
  foreach ($lines as $line) {
    if (preg_match("/On\s\w{3},\s\w{3}\s\d{1,2},\s\d{4}\sat\s\d{1,2}:\d{2}\s[PM|AM]/s", #Gmail
                             $line, $matches)
      || preg_match("/On\s\w{3}\s\d{1,2},\s\d{4},\sat\s\d{1,2}:\d{2}\s(AM|PM),\s/s", #Apple mail
                            $line, $matches)    
      || preg_match("/On\s\w{3}\s\d{2},\s\d{4},\sat\s[0-9:]{4,5}\s(PM|AM),\s[a-zA-Z\s]+wrote:/s", #unknown as of yet
                            $line, $matches)
      || preg_match("/On\s\d{1,2}\/\d{1,2}\/\d{1,2},\s.+?<[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+@(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+>\swrote:/s", # Some mobile email client, blackberry maybe?
                            $line, $matches)) {
      
      $quotes[$count][] = $line;
      $in_quote = true;
    }
    else if ($in_quote && (trim($line) === "" || substr(trim($line), 0, 1) === ">"
      // or the previous line ended w/ a "<" Long emails addresses
      // (e.g. <someaddress@gmail.com>) sometimes get truncated
      // leaving the second part of the line on the next line.
            || substr(trim(array_pop(end($quotes))), -1) === "<" 
      // Same situation as above. But here the <someaddress@gmail.com> is
      // brought down to the next line so the < is at the start of the line.
            || substr(trim($line), 0, 1) === "<"
      // And wrote: is also sometimes shoved down to the next line.
            || substr(trim($line), 0, 6) === "wrote:")) {
      $quotes[$count][] = $line;
    }
    else {
      $in_quote = false;
      $count++;
    }
  }
  $quotes_imploded = array();
  foreach ($quotes as $quote) {
    $quotes_imploded[] = implode($quote, "\n");
  }
  
  return $quotes_imploded;
}

/*
 * Filter quotes out of emails from hotmail.com.
 *
 * The assumption here is that once the headers to the quoted section begins,
 * all content after that is quotes. This seems to be how in practice people
 * send emails but occasionaly this might filter the wrong text.
 */
function _og_mailinglist_filter_hotmail_quotes($text) {
  $regex = "/Date:\s\w{3},\s\d{1,2}\s\w{3}\s\d{4}\s\d{2}:\d{2}:\d{2}\s-\d{4}.Subject:\s.*?From:.*?To:\s.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }
}

/*
 * Filter quotes out of emails from hotmail.com.
 */
function _og_mailinglist_filter_outlook_quotes($text) {
  $regex = "/From:\s\w+\s\w+.+?\[mailto:\w+.+?Sent:\s\w+,\s\w+\s\d{2},\s\d{4}\s\d{1,2}:\d{1,2}\s[AM|PM]+.To:\s.+?Subject:\s.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }  
}

/*
 * Filter quotes out of emails from Android's GMail client.
 */
function _og_mailinglist_filter_android_gmail_quotes($text) {
  $regex = "/On\s\w{3}\s\d{1,2},\s\d{4}\s\d{1,2}:\d{2}\s[PM|AM]+,\s.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }  
}

/*
 * Filter quotes out of emails from some other microsoftie looking email client.
 */
function _og_mailinglist_filter_unknown_client_quotes($text) {
  $regex = "/From:\s\".*?\"\s<.*?@.*?>.Date:\s\w{3},.*?To:.*?<.*?@.*?>.*?Cc:\s.*?<.*?@.*?>.*?Subject:.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }  
}

/*
 * Filter quotes out of emails from some other microsoftie looking email client.
 */
function _og_mailinglist_filter_unknown_client2_quotes($text) {
  $regex = "/From:\s.*?<.*?@.*?>.To:.*?@.*?Sent:\s\w{3},\s.*?\d{1,2},\s\d{4}\s.*?Subject:\s.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }  
}

/*
 * Filter quotes out of emails from yet another microsoftie looking email client.
 *
 * From: Dave [mailto:bob@example.com]
 * Sent: Monday, April 05, 2010 5:30 PM
 * To: A group
 * Subject: [a-group] SQL Server Express
 * 
 */
function _og_mailinglist_filter_unknown_client3_quotes($text) {
  $regex = "/From:\s.*?\[.*?@.*?\].*?Sent:\s\w*?,\s\w*?\s\d{1,2},\s\d{4}\s\d{1,2}:\d{2}\s(PM|AM).*?To:\s.*?Subject:.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }
}
/*
 * Filter quotes out of emails from yet another microsoftie looking email client.
 *
 * -----Original Message-----
 * From: Someone <someone@me.com>
 * Date: Sat, 10 Apr 2110 12:25:28 
 * To: Entrepreneurship<entrepreneurship@island.byu.edu>
 * Subject: Re: [entrepreneurship] Need Tech Guys to Form 
 * 
 */
function _og_mailinglist_filter_unknown_client4_quotes($text) {
  $regex = "/-----Original\sMessage-----.*?From:\s.*?@.*?Date:\s\w{3},\s\d{1,2}\s.*?:.*?:.*?To:.*?@.*?Subject:.*/s";
  preg_match($regex, $text, $matches);
  if (!empty($matches)) {
    return $matches;
  }
  else {
    return array();
  }
}

/*
 * Implementation of hook_cron().
 */
function og_mailinglist_cron() {
  // On first run, set digest to run today.
  $next_digest_runtime = variable_get('og_mailinglist_digest_runtime',
          mktime(17, date("I"), date("s"), date("n"), date("j")));

  if (time() > $next_digest_runtime) {
    module_load_include('inc', 'og_mailinglist', 'og_mailinglist_digest_email');

    // Send off digest emails.
    _og_mailinglist_send_digest_emails();

    // Set tomorrow's run time.
    variable_set('og_mailinglist_digest_runtime', mktime(17, date("I"), date("s"), date("n"), date("j") + 1));
  }
}
